{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset161 Calibri;}{\f2\fnil\fcharset1 Segoe UI Symbol;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 1. List Comprehensions\par
a. Write a list comprehension that generates a list of squares of the numbers from 1 to 10.\par
squares = [x**2 for x in range(1, 11)]\par
print(squares)\par
\par
b. Write a list comprehension to extract all the vowels from the string "hello world".\par
string = "hello world"\par
vowels = [char for char in string if char in 'aeiouAEIOU']\par
print(vowels)\par
\par
2. Dictionary Comprehension\par
a. Create a dictionary where the keys are numbers from 1 to 5 and the values are the cubes\par
of the keys.\par
cube_dict = \{x: x**3 for x in range(1, 6)\}\par
print(cube_dict)\par
\par
b. Create a dictionary where the keys are the \f1\u976?irst letters of the words in the list ["apple",\par
"banana", "cherry"] and the values are the words themselves.\par
words = ["apple", "banana", "cherry"]\par
first_letter_dict = \{word[0]: word for word in words\}\par
print(first_letter_dict)\par
\par
3. Lambda Functions\par
a. Write a lambda function that adds 10 to a given number and use it to add 10 to the\par
number 5.\par
add_ten = lambda x: x + 10\par
result = add_ten(5)\par
print(result)\par
\par
b. Write a lambda function that checks if a number is even and use it to test the number 4.\par
is_even = lambda x: x % 2 == 0\par
result = is_even(4)\par
print(result)\par
\par
4. Filter Function\par
a. Use the \f0\lang1033 f\f1\lang9 ilter function to \u976?ilter out the odd numbers from the list [1, 2, 3, 4, 5, 6, 7, 8, 9,\par
10].\par
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\par
filtered_numbers = list(filter(lambda x: x % 2 == 0, numbers))\par
print(filtered_numbers)\par
\par
b. Use the \u976?ilter function to remove all strings shorter than 4 characters from the list ["cat",\par
"dog", "elephant", "rat"].\par
words = ["cat", "dog", "elephant", "rat"]\par
filtered_words = list(filter(lambda x: len(x) >= 4, words))\par
print(filtered_words)\par
\par
5. Map Function\par
a. Use the map function to double all the numbers in the list [1, 2, 3, 4, 5].\par
numbers = [1, 2, 3, 4, 5]\par
doubled_numbers = list(map(lambda x: x * 2, numbers))\par
print(doubled_numbers)\par
\par
b. Use the map function to convert a list of integers [1, 2, 3] to their corresponding string\par
representations.\par
numbers = [1, 2, 3]\par
string_numbers = list(map(lambda x: str(x), numbers))\par
print(string_numbers)\par
\par
6. Reduce Function\par
a. Use the reduce function to \u976?ind the product of the numbers in the list [1, 2, 3, 4, 5].\par
from functools import reduce\par
numbers = [1, 2, 3, 4, 5]\par
product = reduce(lambda x, y: x * y, numbers)\par
print(product)\par
\par
b. Use the reduce function to concatenate a list of strings ["Hello", "World", "from",\par
"Python"] into a single string.\par
from functools import reduce\par
strings = ["Hello", "World", "from", "Python"]\par
concatenated_string = reduce(lambda x, y: x + ' ' + y, strings)\par
print(concatenated_string)\par
\par
7. Generator Functions\par
a. Create a generator function that yields the \u976?irst 5 even numbers.\par
def first_five_even_numbers():\par
    count = 0\par
    num = 0\par
    while count < 5:\par
        if num % 2 == 0:\par
            yield num\par
            count += 1\par
        num += 1\par
for number in first_five_even_numbers():\par
    print(number)\par
\par
b. Create a generator function that yields numbers in the Fibonacci sequence up to the\par
10th number.\par
def fibonacci_sequence():\par
    a, b = 0, 1\par
    count = 0\par
    while count < 10:\par
        yield a\par
        a, b = b, a + b\par
        count += 1\par
for number in fibonacci_sequence():\par
    print(number)\par
\par
8. Handling Exceptions\par
a. Write a function that takes two numbers and returns their division, handling the division\par
by zero exception.\par
def safe_division(a, b):\par
    try:\par
        result = a / b\par
        return result\par
    except ZeroDivisionError:\par
        print("Error: Division by zero")\par
        return None\par
numerator = 10\par
denominator = 0\par
result = safe_division(numerator, denominator)\par
if result is not None:\par
    print(f"\{numerator\} divided by \{denominator\} is \{result\}")\par
\par
b. Write a function that reads a \u976?ile and handles the \u976?ile not found exception.\par
def read_file(file_path):\par
    try:\par
        with open(file_path, 'r') as file:\par
            content = file.read()\par
            return content\par
    except FileNotFoundError:\par
        print(f"Error: File '\{file_path\}' not found")\par
        return None\par
# Example usage:\par
file_path = 'example.txt'\par
file_content = read_file(file_path)\par
if file_content is not None:\par
    print(f"Content of '\{file_path\}':")\par
    print(file_content)\par
\par
9. File I/O\par
a. Write a program that writes the string "Hello, World!" to a \u976?ile and then reads it back.\par
b. Write a program that appends the string "Goodbye!" to an existing \u976?ile and then reads\par
and prints the \u976?ile content.\par
10. Regular Expressions\par
a. Use regular expressions to \u976?ind all the words starting with 'a' in the string "apple and\par
banana are amazing".\par
import re\par
text = "apple and banana are amazing"\par
pattern = r'\\b[aA]\\w+'\par
matches = re.findall(pattern, text)\par
print(matches)\par
\par
b. Use regular expressions to extract all the email addresses from the string "contact us at\par
email@example.com or admin@site.org".\par
import re\par
text = "contact us at email@example.com or admin@site.org"\par
pattern = r'[\\w\\.-]+@[\\w\\.-]+'\par
email_addresses = re.findall(pattern, text)\par
print(email_addresses)\par
\par
11. Classes and Objects\par
a. Create a class Person with attributes name and age. Instantiate an object of this class and\par
print its attributes.\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
person1 = Person("John Doe", 30)\par
print(f"Name: \{person1.name\}")\par
print(f"Age: \{person1.age\}")\par
\par
b. Create a class Car with attributes make, model, and year. Instantiate an object of this\par
class and print its attributes.\par
class Car:\par
    def __init__(self, make, model, year):\par
        self.make = make\par
        self.model = model\par
        self.year = year\par
car1 = Car("Toyota", "Camry", 2022)\par
print(f"Make: \{car1.make\}")\par
print(f"Model: \{car1.model\}")\par
print(f"Year: \{car1.year\}")\par
\par
12. Inheritance\par
a. Create a class Employee that inherits from the Person class and adds an attribute salary.\par
Instantiate an object of Employee and print all its attributes.\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
class Employee(Person):\par
    def __init__(self, name, age, salary):\par
        super().__init__(name, age)\par
        self.salary = salary\par
employee1 = Employee("Alice Smith", 30, 50000)\par
print(f"Name: \{employee1.name\}")\par
print(f"Age: \{employee1.age\}")\par
print(f"Salary: $\{employee1.salary\}")\par
\par
b. Create a class Manager that inherits from Employee and adds an attribute department.\par
Instantiate an object of Manager and print all its attributes.\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
class Employee(Person):\par
    def __init__(self, name, age, salary):\par
        super().__init__(name, age)\par
        self.salary = salary\par
class Manager(Employee):\par
    def __init__(self, name, age, salary, department):\par
        super().__init__(name, age, salary)\par
        self.department = department\par
manager1 = Manager("Bob Johnson", 40, 70000, "Sales")\par
print(f"Name: \{manager1.name\}")\par
print(f"Age: \{manager1.age\}")\par
print(f"Salary: $\{manager1.salary\}")\par
print(f"Department: \{manager1.department\}")\par
\par
13. Static Methods\par
a. Add a static method to the Person class that returns a greeting message.\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
    @staticmethod\par
    def greet():\par
        return "Hello! Welcome to the example program."\par
person1 = Person("Alice", 25)\par
print(f"Name: \{person1.name\}")\par
print(f"Age: \{person1.age\}")\par
message = Person.greet()\par
print(message)\par
\par
b. Add a static method to the MathUtils class that returns the square of a given number.\par
class MathUtils:\par
    @staticmethod\par
    def square(x):\par
        return x ** 2\par
number = 5\par
result = MathUtils.square(number)\par
print(f"The square of \{number\} is: \{result\}")\par
\par
14. Class Methods\par
a. Add a class method to the Person class that returns a new instance of Person with a\par
default name and age.\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age    \par
    @classmethod\par
    def create_default(cls):\par
        return cls("Unknown", 0)\par
person_default = Person.create_default()\par
print(f"Name: \{person_default.name\}")\par
print(f"Age: \{person_default.age\}")\par
\par
b. Add a class method to the Book class that creates a new Book instance from a given title\par
and author.\par
class Book:\par
    def __init__(self, title, author):\par
        self.title = title\par
        self.author = author    \par
    @classmethod\par
    def create_from_title_author(cls, title, author):\par
        return cls(title, author)\par
book1 = Book.create_from_title_author("Python Programming", "Guido van Rossum")\par
print(f"Title: \{book1.title\}")\par
print(f"Author: \{book1.author\}")\par
\par
15. Magic Methods\par
a. Override the __str__ method in the Person class to return a formatted string.\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age    \par
    def __str__(self):\par
        return f"Person: name='\{self.name\}', age=\{self.age\}"\par
person1 = Person("Alice", 25)\par
print(person1)\par
str_representation = str(person1)\par
print(str_representation)\par
\par
b. Override the __add__ method in a Vector class to add two vectors together.\par
class Vector:\par
    def __init__(self, x, y):\par
        self.x = x\par
        self.y = y \par
    def __add__(self, other):\par
        if isinstance(other, Vector):\par
            return Vector(self.x + other.x, self.y + other.y)\par
        else:\par
            raise TypeError("Unsupported operand type(s) for +: 'Vector' and \{\}".format(type(other)))\par
    def __str__(self):\par
        return f"Vector(\{self.x\}, \{self.y\})"\par
v1 = Vector(1, 2)\par
v2 = Vector(3, 4)\par
v3 = v1 + v2\par
print(f"v1: \{v1\}")\par
print(f"v2: \{v2\}")\par
print(f"v1 + v2 = \{v3\}")\par
\par
16. Context Managers\par
a. Create a context manager that prints "Entering" when entering the context and "Exiting"\par
when exiting the context.\par
class MyContextManager:\par
    def __enter__(self):\par
        print("Entering")\par
        return self    \par
    def __exit__(self, exc_type, exc_val, exc_tb):\par
        print("Exiting")\par
with MyContextManager():\par
    print("Inside the context")\par
print("Outside the context")\par
\par
b. Create a context manager that temporarily changes the current working directory and\par
restores it back when exiting the context.\par
17. Iterators\par
a. Create a custom iterator that returns numbers from 1 to 5.\par
class MyIterator:\par
    def __init__(self):\par
        self.current = 1\par
    def __iter__(self):\par
        return self\par
    def __next__(self):\par
        if self.current > 5:\par
            raise StopIteration\par
        else:\par
            value = self.current\par
            self.current += 1\par
            return value\par
iterator = MyIterator()\par
for num in iterator:\par
    print(num)\par
\par
b. Create a custom iterator that returns the characters in a string one by one.\par
class CharIterator:\par
    def __init__(self, string):\par
        self.string = string\par
        self.index = 0\par
    def __iter__(self):\par
        return self\par
    def __next__(self):\par
        if self.index >= len(self.string):\par
            raise StopIteration  \par
        else:\par
            char = self.string[self.index]\par
            self.index += 1\par
            return char\par
my_string = "Hello"\par
iterator = CharIterator(my_string)\par
for char in iterator:\par
    print(char)\par
\par
18. Modules and Packages\par
a. Create a simple module my_module.py with a function greet that prints "Hello, World!".\par
Import and use this function in another script.\par
# my_module.py\par
def greet():\par
    print("Hello, World!")\par
\par
b. Create a package my_package with a module utils.py that contains a function square that\par
returns the square of a number. Import and use this function in another script.\par
my_package/\par
\f2\u9500?\u9472?\u9472?\f0  __init__.py\par
\f2\u9492?\u9472?\u9472?\f0  utils.py\par
# utils.py\par
def square(x):\par
    return x ** 2\par
# main_script.py\par
from my_package.utils import square\par
num = 5\par
result = square(num)\par
print(f"The square of \{num\} is: \{result\}")\f1\par
\par
19. Date and Time\par
a. Write a program that gets the current date and time and prints it in the format "YYYYMM-DD HH:MM".\par
from datetime import datetime\par
def get_current_datetime_formatted():\par
    current_datetime = datetime.now()\par
    formatted_datetime = current_datetime.strftime("%Y%m-%d %H:%M")    \par
    return formatted_datetime\par
formatted_datetime = get_current_datetime_formatted()\par
print(formatted_datetime)\par
\par
b. Write a program that calculates the number of days between two given dates.\par
from datetime import datetime\par
def days_between_dates(date1_str, date2_str):\par
    date_format = "%Y-%m-%d"\par
    date1 = datetime.strptime(date1_str, date_format)\par
    date2 = datetime.strptime(date2_str, date_format)\par
    delta = date2 - date1\par
    return delta.days\par
date1_str = "2024-07-01"\par
date2_str = "2024-07-15"\par
days_difference = days_between_dates(date1_str, date2_str)\par
print(f"Number of days between \{date1_str\} and \{date2_str\}: \{days_difference\} days")\par
\lang1032 20. Collections\lang9\par
a. Use the collections.Counter class to count the occurrences of each character in the string\par
"abracadabra".\par
from collections import Counter\par
input_string = "abracadabra"\par
char_counts = Counter(input_string)\par
for char, count in char_counts.items():\par
    print(f"Character '\{char\}' occurs \{count\} times")\par
\par
b. Use the collections.defaultdict class to create a dictionary that returns a default value of\par
0 for any new keys.\par
from collections import defaultdict\par
default_dict = defaultdict(int)\par
default_dict['a'] += 1\par
default_dict['b'] += 2\par
default_dict['c'] += 3\par
print(default_dict)\f0\par
}
 